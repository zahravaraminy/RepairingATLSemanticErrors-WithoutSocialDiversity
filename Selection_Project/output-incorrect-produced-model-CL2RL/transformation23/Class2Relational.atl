-- @atlcompiler emftvm
module Class2Relational;
create OUT : Relational from IN : Class;

--helper context Class!NamedElt def: name : String =
-- if self.multiValued.oclIsUndefined() then
-- ''
-- else
-- self.name
--endif;
helper context Class!Attribute def: isMultiValued : Boolean =
 if self.multiValued.oclIsUndefined() then
  false
 else
  self.multiValued
 endif;

helper def: defaultType : String =
 'Integer';

helper def: objectIdType(idType : String) : Class!DataType =
 Class!DataType.allInstances()->any(e |
  e.name = idType
 );

rule Package2Schema {
 from
  p : Class!Package
 to
  s : Relational!Schema (
   tables <- p.elems->select(e |
    e.oclIsKindOf(Class!Class)
   )->sortedBy(e |
    e.isAbstract
   )->union(p.elems->select(e |
    e.oclIsKindOf(Class!Class)
   )->reject(e |
    e.isAbstract
   )->collect(e |
    e.att
   )->flatten()->select(a |
    a.multiValued
   )),
   types <- p.elems->select(e |
    e.oclIsKindOf(Class!DataType)
   )
  )
}

rule Class2Table {
 from
  c : Class!Class
  (
   not c.isAbstract
  )
 to
  out : Relational!Table (
   name <- c.name,
   col <- Set {key},
   key <- c.supers
  ),
  key : Relational!Column (
   name <- 'objectId',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

rule DataType2Type {
 from
  dt : Class!DataType
 to
  out : Relational!Type (
   name <- dt.name
  )
}

rule DataTypeAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsTypeOf(Class!DataType) and not a.multiValued
  )
 to
  out : Relational!Column (
   name <- a.name,
   type <- a.type
  )
}

rule MultiValuedDataTypeAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!DataType) and a.multiValued
  )
 to
  out : Relational!Table (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {thisModule.createIdColumn(a.owner), value}
  ),
  value : Relational!Type (
   name <- a.name
  )
}

rule ClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Class) and not a.multiValued
  )
 to
  foreignKey : Relational!Column (
   name <- a.name + 'Id',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

rule MultiValuedClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Class) and a.multiValued
  )
 to
  t : Relational!Table (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {thisModule.createIdColumn(a.owner), thisModule.createIdColumn(a)}
  )
}

lazy rule createIdColumn {
 from
  ne : Class!NamedElt
 to
  key : Relational!Column (
   name <- ne.name,
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}

-- MUTATION "Binding-target Modification" from key to col (line 64:4-64:20 of original transformation)


-- MUTATION "Operation Call Modification" from oclIsKindOf to oclIsTypeOf (line 85:4-85:38 of original transformation)


-- MUTATION "Deletion of Binding" col in out (line 61:4-63:6 of original transformation)


-- MUTATION "Iterator Modification" from reject to sortedBy (line 33:14-37:5 of original transformation)


-- MUTATION "Creation of Binding" key in out (line 59:3-65:4 of original transformation)

