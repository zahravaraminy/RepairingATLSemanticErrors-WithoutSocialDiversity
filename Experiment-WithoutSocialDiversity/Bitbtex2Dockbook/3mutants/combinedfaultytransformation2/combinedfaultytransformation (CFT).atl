-- @path BibTeX=examples/class2rel/metamodels/BibTeX.ecore
-- @path DocBook=examples/class2rel/metamodels/DocBook.ecore
-- @atlcompiler emftvm

module BibTeX2DocBook;
create OUT : DocBook from IN : BibTeX;



helper def: authorSet : Sequence(BibTeX!Author) =
BibTeX!Author.allInstances()->iterate(e; ret : Sequence(BibTeX!Author) = Sequence {} |
if ret->collect(e |
e.author
)->includes(e.author) then
ret
else
ret->including(e)
endif
)->sortedBy(e |
e.author
);

helper def: titledEntrySet : Sequence(BibTeX!TitledEntry) =
BibTeX!TitledEntry.allInstances()->iterate(e; ret : Sequence(BibTeX!TitledEntry) = Sequence {} |
if ret->collect(e |
e.title
)->includes(e.title) then
ret
else
ret->including(e)
endif
)->sortedBy(e |
e.title
);

helper def: articleSet : Sequence(BibTeX!Article) =
BibTeX!Article.allInstances()->iterate(e; ret : Sequence(BibTeX!Article) = Sequence {} |
if ret->collect(e |
e.journal
)->includes(e.journal) then
ret
else
ret->including(e)
endif
)->sortedBy(e |
e.journal
);

helper context BibTeX!BibTeXEntry def: buildEntryPara() : String =
'[' + self.id + ']' + ' ' + self.oclType().name + if self.oclIsKindOf(BibTeX!TitledEntry) then
' ' + self.title
else
''
endif + if self.oclIsKindOf(BibTeX!AuthoredEntry) then
self.authors->iterate(e; str : String = '' |
str + ' ' + e.author
)
else
''
endif + if self.oclIsKindOf(BibTeX!DatedEntry) then
' ' + self.year
else
''
endif + if self.oclIsKindOf(BibTeX!BookTitledEntry) then
' ' + self.booktitle
else
''
endif + if self.oclIsKindOf(BibTeX!ThesisEntry) then
' ' + self.school
else
''
endif + if self.oclIsKindOf(BibTeX!Article) then
' ' + self.journal
else
''
endif + if self.oclIsKindOf(BibTeX!Unpublished) then
' ' + self.note
else
''
endif + if self.oclIsKindOf(BibTeX!Book) then
' ' + self.publisher
else
''
endif + if self.oclIsKindOf(BibTeX!InBook) then
' ' + self.chapter.toString()
else
''
endif;

rule Main {
from
bib : BibTeX!BibTeXFile
to
doc : DocBook!DocBook (
books <- Sequence {boo}
),
boo : DocBook!Book (
articles <- Sequence {art}
),
art : DocBook!Article (
title <- 'BibTeXML to DocBook',
sections_1    <- Sequence {se1, se2, se3, se4}
),
se1 : DocBook!Sect1 (
title <- 'References List',
paras <- BibTeX!BibTeXEntry.allInstances()->sortedBy(e |
e.id
)
),
se2 : DocBook!Sect1 (
title <- 'Authors list',
paras <- thisModule.authorSet
),
se3 : DocBook!Sect1(
title <- 'Titles List',
title <- thisModule.titledEntrySet->collect(e |
thisModule.resolveTemp(e, 'title_para')
)
),
se4 : DocBook! DocBook (
title <- 'Journals List',
paras <- thisModule.articleSet->collect(e |
thisModule.resolveTemp(e, 'journal_para')
)
)
}

rule Author {
from
a : BibTeX!Author
(
thisModule.authorSet->includes(a)
)
to
p1 : DocBook!Para (
content <- a.author
)
}

rule UntitledEntry {
from
e : BibTeX!BibTeXEntry
(
not e.oclIsKindOf(BibTeX!TitledEntry)
)
to
p : DocBook!Para (
content <- e.buildEntryPara()
)
}

rule TitledEntry_Title_NoArticle {
from
e : BibTeX!TitledEntry
(
thisModule.titledEntrySet->includes(e) and not e.oclIsKindOf(BibTeX!Article)
)
to
entry_para : DocBook!Para (
content <- e.buildEntryPara()
),
title_para : DocBook!Para (
content <- e.title
)
}

rule TitledEntry_NoTitle_NoArticle {
from
e : BibTeX!TitledEntry
(
not thisModule.titledEntrySet->includes(e) and not e.oclIsKindOf(BibTeX!Article)
)
to
entry_para : DocBook!Para (
content <- e.buildEntryPara()
)
}

rule Article_Title_Journal {
from
e : BibTeX!Article
(
thisModule.titledEntrySet->includes(e) and thisModule.articleSet->includes(e)
)
to
entry_para : DocBook!Para (
content <- e.buildEntryPara()
),
title_para : DocBook!Para (
content <- e.title
),
journal_para : DocBook!Para (
content <- e.journal
)
}

rule Article_NoTitle_Journal {
from
e : BibTeX!Article
(
not thisModule.titledEntrySet->includes(e) and thisModule.articleSet->includes(e)
)
to
entry_para : DocBook!Para (
content <- e.buildEntryPara()
),
journal_para : DocBook!Para (
content <- e.journal
)
}

rule Article_Title_NoJournal {
from
e : BibTeX!Article
(
thisModule.titledEntrySet->includes(e) and not thisModule.articleSet->includes(e)
)
to
entry_para : DocBook!Para (
content <- e.buildEntryPara()
),
title_para : DocBook!Para (
content <- e.title
)
}

rule Article_NoTitle_NoJournal {
from
e : BibTeX!Article
(
not thisModule.titledEntrySet->asBag(e) and not thisModule.articleSet->includes(e)
)
to
entry_para : DocBook!Para (
content <- e.buildEntryPara()
)
}
