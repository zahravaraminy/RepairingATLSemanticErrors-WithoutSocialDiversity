-- @path FSM=examples/class2rel/metamodels/FSM.ecore
-- @path HSM=examples/class2rel/metamodels/HSM.ecore
module HSM2FSM;
create OUT : FSM from IN : HSM;

rule SM2SM {
 from
  sm1 : HSM!StateMachine
 to
  sm2 : FSM!StateMachine (
   name <- sm1.name
  )
}

rule RS2RS {
 from
  rs1 : HSM!RegularState
 to
  rs2 : FSM!RegularState (
   name <- rs1.name,
   stateMachine <- rs1.stateMachine
  )
}

rule IS2IS {
 from
  is1 : HSM!InitialState
  (
   is1.compositeStates.oclIsUndefined()
  )
 to
  is2 : FSM!InitialState (
   stateMachine <- is1.stateMachine,
   name <- is1.name
  )
}

rule IS2RS {
 from
  is1 : HSM!InitialState
  (
   not is1.compositeStates.oclIsUndefined()
  )
 to
  is2 : FSM!RegularState (
   stateMachine <- is1.stateMachine,
   name <- is1.name
  )
}

rule T2TA {
 from
  t1 : HSM!Transition
  (
   not t1.source.oclIsTypeOf(HSM!CompositeState) and not t1.target.oclIsTypeOf(HSM!CompositeState)
  )
 to
  t2 : FSM!Transition (
   label <- t1.label,
   stateMachine <- t1.stateMachine,
   source <- t1.source,
   target <- t1.target
  )
}

rule T2TB {
 from
  t1 : HSM!Transition,
  src : HSM!CompositeState,
  trg : HSM!AbstractState,
  c : HSM!AbstractState
  (
   t1.source = src and t1.target = trg and c.compositeStates = src and not trg.oclIsTypeOf(HSM!CompositeState)
  )
 to
  t2 : FSM!Transition (
   label <- t1.label,
   stateMachine <- t1.stateMachine,
   source <- c,
   target <- trg
  )
}

rule T2TC {
 from
  t1 : HSM!Transition,
  src : HSM!AbstractState,
  trg : HSM!CompositeState,
  c : HSM!InitialState
  (
   t1.source = src and t1.target = trg and c.compositeStates = trg and not src.oclIsTypeOf(HSM!CompositeState)
  )
 to
  t2 : FSM!Transition (
   label <- t1.label,
   stateMachine <- t1.stateMachine,
   source <- src,
   target <- c
  )
}
