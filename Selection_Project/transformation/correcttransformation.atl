-- @atlcompiler emftvm

module Class2Relational;
create OUT : Relational from IN : Class;
--helper context Class!NamedElt def: name : String =
-- if self.multiValued.oclIsUndefined() then
 -- ''
-- else
 -- self.name
 --endif;

helper context Class!Attribute def: isMultiValued : Boolean =
 if self.multiValued.oclIsUndefined() then
  false
 else
  self.multiValued
 endif;

helper def: defaultType : String =
 'Integer';

helper def: objectIdType(idType : String) : Class!DataType =
 Class!DataType.allInstances()->any(e |
  e.name = idType
 );
--0
rule Package2Schema {
 from
  p : Class!Package
 to
  s : Relational!Schema (
   tables <- p.elems->select(e |
      e.oclIsKindOf(Class!Class)
    )->reject(e|
      e.isAbstract
   )->union(
      p.elems->select(e|e.oclIsKindOf(Class!Class))->reject(e |
        e.isAbstract
      )->collect(e|e.att)->flatten()->select(
        a| a.multiValued
      )
  ),
  
   types <- p.elems->select(e |
    e.oclIsKindOf(Class!DataType)
   )
  )
}
--1
rule Class2Table {
 from
  c : Class!Class
  (
   not c.isAbstract
  )
 to
  out : Relational!Table (
   name <- c.name,
   col <- Sequence {key}->union(c.att->select(e |
    not e.multiValued
   )),
   key <- Set {key}
  ),
  key : Relational!Column (
   name <- 'objectId',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}
--2
rule DataType2Type {
 from
  dt : Class!DataType
 to
  out : Relational!Type (
   name <- dt.name
  )
}
--3
rule DataTypeAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!DataType) and not a.multiValued
  )
 to
  out : Relational!Column (
   name <- a.name,
   type <- a.type
  )
}
--4
rule MultiValuedDataTypeAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!DataType) and a.multiValued
  )
 to
  out : Relational!Table (
   name <- a.owner.name + '_' + a.name,
   col <- Sequence {thisModule.createIdColumn(a.owner), value}
  ),
  value : Relational!Type (
   name <- a.name
  )
}
--5
rule ClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Class) and not a.multiValued
  )
 to
  foreignKey : Relational!Column (
   name <- a.name + 'Id',
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
}
--6
rule MultiValuedClassAttribute2Column {
 from
  a : Class!Attribute
  (
   a.type.oclIsKindOf(Class!Class) and a.multiValued
  )
 to
  t : Relational!Table ( 
   name <- a.owner.name + '_' + a.name,
   
   col <- Sequence {thisModule.createIdColumn(a.owner), thisModule.createIdColumn(a)}
  )
}
--7
lazy rule createIdColumn {
 from
  ne : Class!NamedElt
 to
  key : Relational!Column (
   name <- ne.name,
   type <- thisModule.objectIdType(thisModule.defaultType)
  )
} 