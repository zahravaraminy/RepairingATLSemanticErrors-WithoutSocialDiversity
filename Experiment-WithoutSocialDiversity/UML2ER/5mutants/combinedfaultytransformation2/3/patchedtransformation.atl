-- @path SimpleUml=/example.tracts/uml2er/metamodels/SimpleUml.ecore
-- @path ER=/example.tracts/uml2er/metamodels/ER.ecore
-- @atlcompiler emftvm
module SimpleUml2ER;
create OUT : ER from IN : SimpleUml;

abstract rule NamedElement {
 from
  s : SimpleUml!NamedElement
 to
  t : ER!Element (
   name <- s.name
  )
}

rule Package extends NamedElement {
 from
  s : SimpleUml!Package
 to
  t : ER!ERModel
}

rule Class extends NamedElement {
 from
  s : SimpleUml!Class
 to
  t : ER!EntityType (
   features <- s.ownedProperty
  )
}

abstract rule Property extends NamedElement {
 from
  s : SimpleUml!Property
 to
  t : ER!Feature
}

rule Attributes extends Property {
 from
  s : SimpleUml!Property
  (
   not s.primitiveType.oclIsUndefined() and s.complexType.oclIsUndefined()
  )
 to
  t : ER!Attribute (
   type <- s.primitiveType
  )
}

abstract rule References extends Property {
 from
  s : SimpleUml!Property
  (
   not s.complexType.oclIsUndefined()
  )
 to
  t : ER!Reference (
   type <- s.complexType
  )
}

rule WeakReferences extends References {
 from
  s : SimpleUml!Property
  (
   not s.isContainment
  )
 to
  t : ER!WeakReference (
   type <- s
  )
}

rule StrongReferences extends References {
 from
  s : SimpleUml!Package
  (
   s.isContainment
  )
 to
  t : ER!StrongReference
}

-- MUTATION "InPattern Element Modification" from s:Property to s:Package (line 79:1-79:23 of original transformation)


-- MUTATION "Navigation Modification" from s.primitiveType to s.name (line 13:9-13:24 of original transformation)


-- MUTATION "OutPattern Element Modification" from t:ERModel to t:EntityType (line 29:1-31:2 of original transformation)


-- MUTATION "Binding-target Modification" from name to features (line 30:1-30:24 of original transformation)

